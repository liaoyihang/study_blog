import{_ as e,o as a,c as t,R as o}from"./chunks/framework.5IuVB3YY.js";const u=JSON.parse('{"title":"V8垃圾回收机制","titleTemplate":"宿主环境","description":"","frontmatter":{"title":"V8垃圾回收机制","titleTemplate":"宿主环境"},"headers":[],"relativePath":"guide/environment/garbage-collection-easy.md","filePath":"guide/environment/garbage-collection-easy.md"}'),i={name:"guide/environment/garbage-collection-easy.md"},l=o('<h2 id="什么是v8" tabindex="-1">什么是v8 <a class="header-anchor" href="#什么是v8" aria-label="Permalink to &quot;什么是v8&quot;">​</a></h2><p>V8 是一种开源的JavaScript 引擎，它主要用于Chrome 浏览器和 Node.js 环境。V8 引擎中的垃圾回收机制负责自动管理内存的分配和释放，以确保程序运行期间不会出现内存泄漏或垃圾堆积的问题。</p><h2 id="内存存储" tabindex="-1">内存存储 <a class="header-anchor" href="#内存存储" aria-label="Permalink to &quot;内存存储&quot;">​</a></h2><p>内存，是用于存放程序和数据的计算机部件。 在内存中，我们的代码主要分为：</p><ul><li>text：代码段</li><li>data：全局和静态变量数据</li><li>stack：栈用于存放局部变量，函数返回地址</li><li>heap：堆用于程序运行时动态分配内存 其中，heap 区域里的内存是根据程序运行动态分配，根据特定的回收算法动态销毁的。</li></ul><h2 id="回收算法" tabindex="-1">回收算法 <a class="header-anchor" href="#回收算法" aria-label="Permalink to &quot;回收算法&quot;">​</a></h2><p>在V8中，主要将内存分为新生代和老生代两代。新生代中的对象存活时间较短的对象，老生代中的对象存活时间较长，或常驻内存的对象。</p><ul><li>新生代 新生代采用 Scavenge 实现的垃圾回收算法。将新生代内存空间分为两个部分：From 空间和 To 空间，新创建的对象首先被分配到 From 空间。触发回收机制时，V8 首先进行标记操作，标记活跃的对象，然后将这些对象复制到 To 空间，同时进行压缩等操作，From 空间和 To 空间的角色互换，完成垃圾回收。</li><li>老生代 老生代使用标记-清除和标记-压缩两种算法进行老生代的垃圾回收，标记-清除算法首先进行标记操作，标记出活跃的对象，然后清除未标记的对象。标记-压缩算法在清除未标记的对象后，将存活的对象压缩到内存的一端，从而减少内存碎片化。</li></ul>',8),r=[l];function n(c,s,d,_,h,p){return a(),t("div",null,r)}const g=e(i,[["render",n]]);export{u as __pageData,g as default};
